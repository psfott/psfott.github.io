<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>OO hw1</title>
      <link href="/2023/02/28/OO-hw1/"/>
      <url>/2023/02/28/OO-hw1/</url>
      
        <content type="html"><![CDATA[<h1 id="OO-hw1"><a href="#OO-hw1" class="headerlink" title="OO hw1"></a>OO hw1</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我们要做的是对多变量的多项式进行括号展开，并进行相应的同类项合并化简。根据training代码给出的提示，个人思路分为以下两步：</p><ul><li>将输入的表达式通过递归下降转化成后缀表达式 <strong>（展开括号）</strong></li><li>将后缀表达式计算并合并同类项输出 <strong>（计算后缀表达式）</strong></li></ul><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>我的代码分为上述的两部分，分别实现相应的功能，用main函数连接</p><ul><li><p>递归下降求后缀表达式</p><ul><li><p>首先对表达式进行预处理</p><ol><li><p>去掉表达式所有的<strong>空白符</strong></p></li><li><p>若<strong>第一项</strong>为符号，则在表达式开头补0</p></li><li><p>将表达式中连续的+&#x2F;-号整合成一个+&#x2F;-号</p></li><li><p>去除******后面紧跟着的 <strong>+</strong></p></li></ol></li><li><p>通过形式化定义，讲表达式分为四个层次：<strong>Factor</strong>（变量和常量）、<strong>Power</strong>（幂）、<strong>Term</strong>(用<em>号相连)、*<em>Expr</em></em>(用+&#x2F;-号相连)，并对上述四种对象进行解析</p><ul><li><strong>parseFactor</strong>：若下一个字符为单目运算符或者是数字或者是变量 x ，则不断看下一个字符是否是数字。如果不是数字，那么说明下一个符号不属于因子，即对因子的解析结束</li><li><strong>parsePower</strong>：基本项由因子的幂次方组成.当解析到一个因子后，若下一个解析到的单目运算符为 <code>**</code> ，那么读入这个符号并做处理，下一个符号一定是一个带符号整数，否则，基本项的解析结束。</li><li><strong>parseTerm</strong>：项由幂函数或因子以*号相连，处理方法类似幂函数</li><li><strong>parseExpr</strong>：表达式由项和+&#x2F;-号相连，处理方法类似</li><li>通过题目所给的形式化表述可以表叫容易地建立层次，并且通过方法的互相调用完成解析。笔者将******视为一个整体。</li><li>可扩展性：递归下降方法的好处在于，它可以通过方法之间的间接递归调用，非常自然地处理嵌套的表达式（即带嵌套括号的表达式）。</li></ul></li></ul></li><li><p>后缀表达式计算</p><ul><li>第一步处理后得到的表达式，运算符只含有+&#x2F;-&#x2F;*&#x2F;**，操作数有带符号的整数以及变量</li><li>新建一个多项式类。由于后缀表达式的优越性，我们对该表达式整体处理。因此我们每读到一个运算符，就对最近的两个多项式进行对应运算并返回一个多项式即可</li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="总UML类图"><a href="#总UML类图" class="headerlink" title="总UML类图"></a>总UML类图</h3><p><img src="D:\MyBlog.deploy_git\img\UML.jpg"></p><h3 id="Lexer类"><a href="#Lexer类" class="headerlink" title="Lexer类"></a>Lexer类</h3><p><img src="D:\MyBlog.deploy_git\img\lexer.jpg"></p><ul><li>该类主要对原始表达式进行处理，使其按照需求每次都能输出一个<strong>操作数&#x2F;运算符</strong></li><li>注意判断数字前的+&#x2F;-号是否为单目运算符</li></ul><h3 id="Parser类"><a href="#Parser类" class="headerlink" title="Parser类"></a>Parser类</h3><p><img src="D:\MyBlog.deploy_git\img\parser.jpg"></p><ul><li>该类使用递归下降法处理表达式</li><li>注意：若是识别到左括号，则用递归调用parseExpr()处理括号内的内容即可</li></ul><h3 id="Polynominal类"><a href="#Polynominal类" class="headerlink" title="Polynominal类"></a>Polynominal类</h3><p><img src="D:\MyBlog.deploy_git\img\Poly.jpg"></p><ul><li>笔者用Hashmap存储多项式的每一个单项式，其中key用一个Arraylist存储xyz对应的指数，value部分存储单项式的系数</li><li>其中有<strong>add&#x2F;sub&#x2F;mul&#x2F;pow</strong>方法进行计算和合并同类项，最后通过重写toString方法输出化简后的表达式</li></ul><h3 id="因子类接口（Factor）"><a href="#因子类接口（Factor）" class="headerlink" title="因子类接口（Factor）"></a>因子类接口（Factor）</h3><p>详见training的架构</p><h2 id="笔者的一些bug"><a href="#笔者的一些bug" class="headerlink" title="笔者的一些bug"></a>笔者的一些bug</h2></li><li><p><strong>BigInteger</strong>的相关问题：慎用.valueof，第一次在写parse类时出了一个愚蠢的错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BigInteger num = BigInteger.valueOf(Long.valueOf(lexer.peek()));//wrong</span><br><span class="line">BigInteger num = new BigInteger(lexer.peek());//correct</span><br></pre></td></tr></table></figure><p>关于new xx() 与 xx.valueof()的区别 参考<a href="https://blog.csdn.net/m0_73097650/article/details/126880577">https://blog.csdn.net/m0_73097650/article/details/126880577</a></p></li><li><p>在重写toString时，写错了一个ArrayList对应的数组下标，导致y和z的指数搞错了，测试时没有测试出来</p><h2 id="优化Tips"><a href="#优化Tips" class="headerlink" title="优化Tips"></a>优化Tips</h2></li><li><p>可以把x**2用x*x替换，减少长度</p></li><li><p>把多项式的首个<strong>非负项</strong>放在表达式首位显示</p></li><li><p>…</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> OO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CO回忆录</title>
      <link href="/2023/02/04/CO_reminder/"/>
      <url>/2023/02/04/CO_reminder/</url>
      
        <content type="html"><![CDATA[<h2 id="浅浅分享一些闯关感受"><a href="#浅浅分享一些闯关感受" class="headerlink" title="浅浅分享一些闯关感受"></a>浅浅分享一些闯关感受</h2><p>非常遗憾由于最后一周感染新冠再加上复习概统的压力，被迫放弃了P7。但P0-P6一路惊心动魄的闯关之旅，侥幸通过后的喜悦和无奈挂p的悲痛每每想起还是让我心中泛起惊涛骇浪。概括如图：<br><img src="https://img-blog.csdnimg.cn/466bb281576645339de4bcb4c038da9f.jpeg#pic_center" alt="tour"></p><p><em>评价是:<br>不要高估计自己的天赋，不要低估努力的作用；<br>不要在压力来袭之时选择自我摆烂，不要在摆烂醒悟之后选择自我压力</em></p><p><strong>一切过往，皆为序章<br>新的一年，新的学期，pp要努力变强！</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> CO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/03/hello-world/"/>
      <url>/2023/02/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
